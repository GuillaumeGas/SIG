package algo;

import base.Point;
import java.util.ArrayList;
import java.util.Collections;

public class EnvConvexe {
    public ArrayList<Point> listPoints;

    public EnvConvexe(ArrayList<Point> points) {
	this.listPoints = points;
    }

    public ArrayList<Point> getConvexe() {
	ArrayList<Point> list = new ArrayList<> ();
	//On va chercher le point de départ, le plus à gauche pour etre sur qu'il fasse partie de l'enveloppe
	//On en profite pour générer une copie de la liste de points
	Point base = this.listPoints.get(0);
	list.add(new Point(base.x, base.y));
	for (int i = 1; i < this.listPoints.size(); i++) {
	    Point p = this.listPoints.get(i);
	    if (p.y < base.y || (p.y == base.y && p.x < base.x)) {
		base = p;
	    }
	    list.add(new Point(p.x, p.y));
	}

	Collections.sort(list);

	ArrayList<Point> res = new ArrayList<> ();
	res.add(base);
	Point last_bigger = null;
	while (
	    Point last_point = res.get(res.size()-1);
	    Point current_point = this.listPoints.get(i);
	    if (current_point.x > last_point.x || res.size() <= 2) {
		if (!last_bigger) {
		    res.add(current_point);
		} else {

		}
	    } else {
		if (!last_above)
		    last_above = last_point;
		res.add(current_point);
	    }
	}
	return res;
    }
}